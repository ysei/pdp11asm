0004 0000                      				CONVERT1251TOKOI8R
0005 0000                      			        ORG 01000
0010 0200                      		EntryPoint:      ; Игра очень прожорлива до стека
0011 0200 012706 040000        				MOV #16384, SP
0014 0204 012700 000233        				MOV #0233, R0
0015 0208 104016               				EMT 016
0018 020A 012700 000232        				MOV #0232, R0
0019 020E 104016               				EMT 016
0022 0210 012737 001333 177706 				MOV #731, @#0177706
0023 0216 012737 000160 177712 				MOV #0160, @#0177712
0026 021C 012737 000100 177660 				MOV #64, @#0177660
0029 0222 004737 003460        		Menu:		JSR PC, @#clearScreen
0032 0226 012700 003656        				MOV #bmpLogo, R0
0033 022A 012701 045020        				MOV #045020, R1
0034 022E 012703 000045        				MOV #37, R3
0035 0232 012702 000020        		drawLogo0:	MOV #16, R2
0036 0236 012021               		drawLogo1:	MOV (R0)+,(R1)+
0037 0238 077202               				SOB R2, drawLogo1
0038 023A 062701 000040        				ADD #32, R1
0039 023E 077307               				SOB R3, drawLogo0
0042 0240 012700 001142        				MOV #txtMenu, R0
0043 0244 004737 003620        				JSR PC, @#Print
0045 0248                      		MenuLoop:	; Инициализируем генератор случайных чисел.
0046 0248 004737 003034        		                JSR PC, @#rand
0049 024C 013700 177662        				MOV @#0177662, R0
0052 0250 012705 001320        				MOV #menuItems, R5
0053 0254 012501               		Menu2:		MOV (R5)+, R1
0054 0256 001770               				BEQ MenuLoop
0055 0258 120001               				CMPB R0, R1
0056 025A 001517               				BEQ StartGame
0057 025C 062705 000010        				ADD #8, R5
0058 0260 000771               				BR Menu2
0063 0262 006012 030222 020056 		txtMenu:	DB 10,12,0222,"0. Лошара",0
0064 026F 006412 030622 020056 				DB 10,13,0222,"1. Новичок",0
0065 027D 007012 027062 166040 				DB 10,14,     "2. Любитель",0
0066 028B 007412 027063 170040 				DB 10,15,     "3. Профессионал",0
0067 029D 013011 024221 024543 				DB  9,22,0221,"(c) 2012 VINXRU",0
0068 02B0 013403 060623 062554 				DB  3,23,0223,"aleksey.f.morozov@gmail.com",0,255
0070 02D0 000060 000011 000011 		menuItems:	DW '0', 9, 9, 3, 21006	; клавиша, ширина, высота, кол-во бомб, положение на экране
0071 02DA 000061 000011 000011 				DW '1', 9, 9, 10, 21006
0072 02E4 000062 000015 000012 			 	DW '2', 13, 10, 20, 20486
0073 02EE 000063 000020 000016 				DW '3', 16, 14, 43, 18432
0074 02F8 000000               				DW 0
0079 02FA                      		StartGame:      ; Параметры игрового поля
0080 02FA 012567 010600        				MOV (R5)+, gameWidth
0081 02FE 012567 010576        				MOV (R5)+, gameHeight
0082 0302 012567 010604        				MOV (R5)+, bombsCnt
0083 0306 012567 010576        				MOV (R5)+, playfieldVA
0086 030A 004737 003460        				JSR PC, @#clearScreen
0087 030E 004737 003504        				JSR PC, @#fillBlocks
0090 0312 016700 010550        				MOV gameWidth, R0
0091 0316 006200               				ASR R0
0092 0318 010067 010550        				MOV R0, cursorX
0093 031C 016700 010540        				MOV gameHeight, R0
0094 0320 006200               				ASR R0
0095 0322 010067 010540        				MOV R0, cursorY
0098 0326 005067 010542        				CLR bombsPutted
0099 032A 005067 010524        				CLR gameOverFlag
0100 032E 005067 010534        				CLR time
0103 0332 005000               				CLR R0
0104 0334 012701 000376        				MOV #254, R1
0105 0338 110160 012222        		StartGame1:	MOVB R1, playfield(R0)
0106 033C 105060 012622        				CLRB userMarks(R0)
0107 0340 105200               				INCB R0
0108 0342 001372               				BNE StartGame1
0111 0344 012700 010016        				MOV #bmpGood, R0
0112 0348 004737 003356        				JSR PC, @#drawSmile
0115 034C 004737 003404        				JSR PC, @#drawPlayField
0118 0350 004737 003216        				JSR PC, @#leftNumber
0119 0354 004737 003260        				JSR PC, @#rightNumber
0122 0358 026727 010446 000001 		mainLoop:       CMP gameOverFlag, #1
0123 035E 001422               				BEQ mainLoop1
0124 0360 026727 010452 001747 				CMP time, #999
0125 0366 001416               				BEQ mainLoop1
0128 0368 005000               				CLR R0
0129 036A 023727 177710 000555 				CMP @#0177710, #365
0130 0370 005500               				ADC R0
0131 0372 026700 010432        				CMP lastTimer, R0
0132 0376 001406               				BEQ mainLoop1
0133 0378 010067 010424        				MOV R0, lastTimer
0136 037C 005267 010416        				INC time
0137 0380 004737 003260        				JSR PC, @#rightNumber
0139 0384                      		mainLoop1:      ; Нажата ли клавиша
0140 0384 032737 000200 177660 				BIT #128, @#0177660
0141 038A 001746               				BEQ mainLoop
0144 038C 013700 177662        				MOV @#0177662, R0
0145 0390 020027 000010        				CMP R0, #8
0146 0394 001441               				BEQ cursorLeft
0147 0396 020027 000031        				CMP R0, #0x19
0148 039A 001451               				BEQ cursorRight
0149 039C 020027 000032        				CMP R0, #0x1A
0150 03A0 001463               				BEQ cursorUp
0151 03A2 020027 000033        				CMP R0, #0x1B
0152 03A6 001473               				BEQ cursorDown	
0153 03A8 020027 000040        				CMP R0, #' '
0154 03AC 001401               				BEQ leftClick
0156 03AE 000504               				BR rightClick
0161 03B0                      		leftClick:	; Если бомбы не установлены, установить бомбы
0162 03B0 016700 010330        				MOV bombsPutted, R0
0163 03B4 001534               				BEQ putBombs
0166 03B6 026727 010310 000001 		putBombsRet:	CMP gameOverFlag, #1
0167 03BC 001413               				BEQ MenuFar
0170 03BE 016700 010302        				MOV cursorX, R0
0171 03C2 016701 010300        				MOV cursorY, R1
0172 03C6 004737 002600        				JSR PC, @#open
0175 03CA 004737 002372        				JSR PC, @#drawCursor
0178 03CE 004737 003126        				JSR PC, @#checkWin
0181 03D2 000702               				BR mainLoop
0185 03D4 000137 001042        		MenuFar:	JMP @#Menu
0189 03D8 026727 010250 000000 		cursorLeft:     CMP cursorX, #0
0190 03DE 001674               				BEQ mainLoop
0191 03E0 004737 002272        				JSR PC, @#hideCursor
0192 03E4 005367 010234        				DEC cursorX
0193 03E8 004737 002372        				JSR PC, @#drawCursor
0194 03EC 000665               				BR mainLoop
0198 03EE 016700 010222        		cursorRight:    MOV cursorX, R0
0199 03F2 005200               				INC R0
0200 03F4 020067 010206        				CMP R0, gameWidth
0201 03F8 001657               				BEQ mainLoop
0202 03FA 004737 002272        				JSR PC, @#hideCursor
0203 03FE 005267 010202        				INC cursorX
0204 0402 004737 002372        				JSR PC, @#drawCursor
0205 0406 000650               				BR mainLoop
0209 0408 026727 010172 000000 		cursorUp:    	CMP cursorY, #0
0210 040E 001644               				BEQ mainLoop
0211 0410 004737 002272        				JSR PC, @#hideCursor
0212 0414 005367 010156        				DEC cursorY
0213 0418 004737 002372        				JSR PC, @#drawCursor
0214 041C 000635               				BR mainLoop
0218 041E 016700 010144        		cursorDown:	MOV cursorY, R0
0219 0422 005200               				INC R0
0220 0424 020067 010130        				CMP R0, gameHeight
0221 0428 001627               				BEQ mainLoop
0222 042A 004737 002272        				JSR PC, @#hideCursor
0223 042E 005267 010124        				INC cursorY
0224 0432 004737 002372        				JSR PC, @#drawCursor
0225 0436 000620               				BR mainLoop
0230 0438                      		rightClick:	; if(gameOver) return;
0231 0438 026727 010106 000001 				CMP gameOverFlag, #1
0232 043E 001614               				BEQ mainLoop
0234 0440 016700 010100        				MOV cursorX, R0
0235 0444 016701 010076        				MOV cursorY, R1
0236 0448 004737 002562        				JSR PC, @#mul01
0238 044C 116203 012622        				MOVB userMarks(R2), R3
0239 0450 005203               				INC R3
0240 0452 020327 000004        				CMP R3, #4
0241 0456 001001               				BNE rightClick1
0242 0458 005003               				  CLR R3 
0243 045A 110362 012622        		rightClick1:	MOVB R3, userMarks(R2)
0245 045E 004737 002272        				JSR PC, @#hideCursor
0246 0462 004737 002372        				JSR PC, @#drawCursor
0247 0466 004737 003216        		rightClickRet:	JSR PC, @#leftNumber
0248 046A 000137 001530        			 	JMP @#mainLoop
0253 046E 005267 010032        		putBombs:	INC bombsPutted
0256 0472 016705 010024        				MOV bombsCnt, R5
0257 0476 010546               		putBombs1:      MOV R5, -(SP)
0260 0478 004737 003034        		putBombs2:	JSR PC, @#rand
0261 047C 016701 010000        				MOV gameHeight, R1
0262 0480 004737 003110        				JSR PC, @#div
0263 0484 010005               				MOV R0, R5
0266 0486 004737 003034        				JSR PC, @#rand
0267 048A 016701 007760        				MOV gameWidth, R1
0268 048E 004737 003110        				JSR PC, @#div
0271 0492 026705 007760        				CMP cursorY, R5
0272 0496 001003               				BNE putBombs3
0273 0498 026700 007750        				CMP cursorX, R0
0274 049C 001755               				BEQ putBombs2
0277 049E 010501               		putBombs3:	MOV R5, R1
0278 04A0 004737 002562        				JSR PC, @#mul01
0281 04A4 122762 000377 012222 				CMPB #255, playfield(R2)
0282 04AA 001746               				BEQ putBombs2
0285 04AC 112762 000377 012222 				MOVB #255, playfield(R2)
0287 04B2 012605               				MOV (SP)+, R5
0288 04B4 077540               				SOB R5, putBombs1
0290 04B6 000137 001666        				JMP @#putBombsRet
0295 04BA 016700 007706        		hideCursor:	MOV cursorX, R0
0296 04BE 016701 007704        				MOV cursorY, R1
0297 04C2 004737 002562        				JSR PC, @#mul01		; R0+R1*16 -> R2
0298 04C6 004737 002420        				JSR PC, @#calcCell2	; R0,R1 -> R1. Портит R3
0299 04CA 116205 012622        				MOVB userMarks(R2), R5
0300 04CE 116202 012222        				MOVB playfield(R2), R2
0301 04D2 004737 002766        				JSR PC, @#getBitmap
0302 04D6 020027 006516        				CMP R0, #bmpUn
0303 04DA 001403               				BEQ drawCursor4
0304 04DC 004737 003600        		drawCursor5:	JSR PC, @#drawImage ; Используется R0,R1. Портит R2.
0305 04E0 000207               		                RTS PC
0309 04E2 020527 000001        		drawCursor4:	CMP R5, #1
0310 04E6 001406               				BEQ drawCursorF
0311 04E8 020527 000002        				CMP R5, #2
0312 04EC 001367               				BNE drawCursor5
0313 04EE 012700 006416        				mov #bmpQ, R0
0314 04F2 000764               				BR drawCursor5
0318 04F4 012700 006316        		drawCursorF:	mov #bmpF, R0
0319 04F8 000761               				BR drawCursor5
0324 04FA 016700 007606        		drawCursor:	MOV cursorX, R0
0325 04FE 016701 007604        				MOV cursorY, R1
0326 0502 004737 002420        				JSR PC, @#calcCell2
0327 0506 012700 006116        				MOV #bmpCursor, R0
0328 050A 004737 003554        				JSR PC, @#drawTransImage
0329 050E 000207               				RTS PC      
0335 0510 010103               		calcCell2:	MOV R1, R3
0336 0512 000303               				SWAB R3
0337 0514 006103               				ROL R3
0338 0516 006103               				ROL R3
0339 0518 060003               				ADD R0, R3
0340 051A 060003               				ADD R0, R3
0341 051C 060003               				ADD R0, R3
0342 051E 060003               				ADD R0, R3
0343 0520 066703 007544        				ADD playfieldVA, R3		
0344 0524 010301               				MOV R3, R1		
0345 0526 000207               				RTS PC
0351 0528                      		check:		; if(x>=8 || y>=8) return;
0352 0528 020067 007522        				CMP R0, gameWidth
0353 052C 103012               				BCC checkRet
0354 052E 020167 007516        		                CMP R1, gameHeight
0355 0532 103007               				BCC checkRet
0357 0534 004737 002562        				JSR PC, @#Mul01
0359 0538 126227 012222 000377 				CMPB playfield(R2), #255 
0360 053E 001114               				BNE openRet
0361 0540 005203               				INC R3
0362 0542 000207               		checkRet:	RTS PC
0367 0544 005301               		call8:		DEC R1
0368 0546 004737 002542        				JSR PC, @#call81
0369 054A 005300               				DEC R0
0370 054C 005201               				INC R1
0371 054E 004715               				JSR PC, (R5)
0372 0550 005200               				INC R0
0373 0552 005200               				INC R0
0374 0554 004715               				JSR PC, (R5)
0375 0556 005300               				DEC R0
0376 0558 005201               				INC R1
0377 055A 004737 002542        				JSR PC, @#call81
0378 055E 005301               				DEC R1
0379 0560 000207               				RTS PC
0384 0562 005300               		call81:         DEC R0
0385 0564 004715               				JSR PC, (R5)
0386 0566 005200               				INC R0
0387 0568 004715               				JSR PC, (R5)
0388 056A 005200               				INC R0
0389 056C 004715               				JSR PC, (R5)
0390 056E 005300               				DEC R0
0391 0570 000207               				RTS PC
0396 0572 010102               		mul01:		MOV R1, R2
0397 0574 006302               				ASL R2
0398 0576 006302               				ASL R2
0399 0578 006302               				ASL R2
0400 057A 006302               				ASL R2
0401 057C 060002               				ADD R0, R2
0402 057E 000207               				RTS PC
0407 0580 020067 007372        		open:		CMP R0, gameWidth
0408 0584 103051               				BCC openRet
0409 0586 020167 007366        		                CMP R1, gameHeight
0410 058A 103046               				BCC openRet
0412 058C 004737 002562        				JSR PC, @#Mul01
0414 0590 126227 012222 000377 			        CMPB playfield(R2), #255
0415 0596 001441               			        BEQ die
0417 0598 126227 012222 000376 				CMPB playfield(R2), #254
0418 059E 001034               				BNE openRet
0420 05A0 010546               				MOV R5, -(SP)
0421 05A2 010046               		                MOV R0, -(SP)
0422 05A4 010146               		                MOV R1, -(SP)             
0424 05A6 012705 002450        				MOV #check, R5
0425 05AA 005003               				CLR R3
0426 05AC 004737 002504        				JSR PC, @#call8
0427 05B0 004737 002562        				JSR PC, @#mul01
0428 05B4 110362 012222        				MOVB R3, playfield(R2)
0430 05B8 010304               				MOV R3, R4
0431 05BA 004737 002746        				JSR PC, @#redrawCell012
0433 05BE 010404               				MOV R4, R4
0434 05C0 001010               				BNE openRets
0436 05C2 012601               		                MOV (SP)+, R1
0437 05C4 012600               		                MOV (SP)+, R0
0438 05C6 012705 002600        				MOV #open, R5
0439 05CA 004737 002504        				JSR PC, @#call8
0440 05CE 012605               		                MOV (SP)+, R5
0441 05D0 000207               				RTS PC
0443 05D2 012601               		openRets:       MOV (SP)+, R1
0444 05D4 012600               		                MOV (SP)+, R0
0445 05D6 012605               				MOV (SP)+, R5
0446 05D8 000207               		openRet:        RTS PC
0451 05DA                      		die:		; Вывод смайлика
0452 05DA 012700 010236        				MOV #bmpBad, R0
0453 05DE 004737 003356        				JSR PC, @#drawSmile
0454 05E2 000137 003200        				JMP @#gameOver
0460 05E6 010302               		redrawCell012:   MOV R3, R2
0461 05E8 004737 002420        				 JSR PC, @#calcCell2 ; R0,R1 -> R1. Портит R3
0462 05EC 004737 002766        				 JSR PC, @#getBitmap ; R2 -> R0		
0463 05F0 004737 003600        				 JSR PC, @#drawImage ; Используется R0,R1. Портит R2.
0464 05F4 000207               				 RTS PC
0470 05F6 010200               		getBitmap:      MOV R2, R0
0471 05F8 005200               				INC R0
0472 05FA 005200               				INC R0
0473 05FC 026727 007202 000001 				CMP gameOverFlag, #1
0474 0602 001006               				BNE getBitmap3		
0475 0604 000300               		getBitmap2:	SWAB R0
0476 0606 006200               				ASR R0
0477 0608 006200               				ASR R0
0478 060A 062700 006516        				ADD #bmpUn, R0
0479 060E 000207               		                RTS PC
0481 0610 120027 000001        		getBitmap3:     CMPB R0, #1
0482 0614 001367               				BNE getBitmap2
0483 0616 005300               				DEC R0
0484 0618 000765               				BR getBitmap2
0490 061A 011105               		rand_state:	dw 0x1245
0492 061C 016700 177772        		rand:           MOV rand_state, R0
0493 0620 010001               				MOV R0, R1
0494 0622 006300               				ASL R0
0495 0624 006300               				ASL R0
0496 0626 006201               				ASR R1                    
0497 0628 006201               				ASR R1                    
0498 062A 006201               				ASR R1                    
0499 062C 006201               				ASR R1
0500 062E 006201               				ASR R1
0501 0630 074100               				XOR R1, R0
0502 0632 010067 177744        				MOV R0, rand_state
0504 0636 010001               				MOV R0, R1
0505 0638 000300               				SWAB R0
0506 063A 074100               				XOR R1, R0
0507 063C 013701 177710        				MOV @#0177710, R1
0508 0640 074100               				XOR R1, R0
0509 0642 042700 177400        				BIC #0xFF00, R0
0511 0646 000207               				RTS PC
0517 0648 005002               		div:		CLR R2
0518 064A 160100               		div1:		SUB R1, R0
0519 064C 103402               				BCS div2
0520 064E 005202               				INC R2
0521 0650 000774               				BR div1
0522 0652 060100               		div2:		ADD R1, R0
0523 0654 000207               				RTS PC
0529 0656                      		checkWin:	; Подсчет не открытых клеток без бомб.
0530 0656 012703 000376        				MOV #254, R3
0531 065A 005001               				CLR R1
0532 065C 005000               		checkWin2:	 CLR R0
0533 065E 004737 002562        		checkWin1:	  JSR PC, @#mul01
0534 0662 126203 012222        				  CMPB playfield(R2), R3
0535 0666 001422               				  BEQ checkWin3
0536 0668 005200               			  	 INC R0
0537 066A 026700 007020        		  	  	 CMP gameWidth, R0
0538 066E 001367               			  	 BNE checkWin1
0539 0670 005201               				INC R1
0540 0672 026701 007012        				CMP gameHeight, R1
0541 0676 001362               				BNE checkWin2
0546 0678 012700 010456        				MOV #bmpWin, R0
0547 067C 004737 003356        				JSR PC, @#drawSmile
0549 0680                      		gameOver:	; Конец игры
0550 0680 012700 000001        				MOV #1, R0
0551 0684 010067 006772        				MOV R0, gameOverFlag
0554 0688 004737 003404        				JSR PC, @#drawPlayField
0556 068C 000207               		checkWin3:	RTS PC
0562 068E                      		leftNumber:	; Подсчет кол-ва флагов
0563 068E 005000               				CLR R0
0564 0690 016701 006766        				MOV bombsCnt, R1
0565 0694 126027 012622 000001 		leftNumber1:	 CMPB userMarks(R0), #1
0566 069A 001002               				 BNE leftNumber3
0567 069C 005301               				  DEC R1
0568 069E 001402               				  BEQ leftNumber4
0569 06A0 105200               		leftNumber3:	INCB R0
0570 06A2 001370               				BNE leftNumber1
0573 06A4 010100               		leftNumber4:	MOV R1, R0
0574 06A6 012703 040510        			        MOV #040510, R3		; Адрес в видеопамяти
0575 06AA 004737 003276        				JSR PC, @#drawNumber
0577 06AE 000207               				RTS PC
0583 06B0 016700 006732        		rightNumber:	MOV time, R0		; Исходное число
0584 06B4 012703 040573        			        MOV #040573, R3		; Адрес в видеопамяти
0585 06B8 004737 003276        				JSR PC, @#drawNumber
0586 06BC 000207               				RTS PC
0592 06BE 012705 000003        		drawNumber:	MOV #3, R5		; Кол-во чисел
0594 06C2                      		drawNumber0:	; Получаем первую цифру
0595 06C2 012701 000012        				MOV #10, R1		
0596 06C6 004737 003110        				JSR PC, @#div
0599 06CA 000300               				SWAB R0
0600 06CC 006200               				ASR R0
0601 06CE 006200               				ASR R0
0602 06D0 062700 010676        				ADD #bmpN0, R0
0605 06D4 012704 000025        				MOV #21, R4
0606 06D8 112023               		drawNumber1:    MOVB (R0)+, (R3)+
0607 06DA 112023               				MOVB (R0)+, (R3)+
0608 06DC 112023               				MOVB (R0)+, (R3)+
0609 06DE 062703 000075        				ADD #61, R3           
0610 06E2 077406               				SOB R4, drawNumber1
0613 06E4 162703 002503        				SUB #1347, R3
0616 06E8 010200               				MOV R2, R0
0617 06EA 077525               				SOB R5, drawNumber0
0619 06EC 000207               				RTS PC
0625 06EE 012701 040435        		drawSmile:	MOV #040435, R1
0626 06F2 012702 000030        				MOV #24, R2
0627 06F6 012021               		drawGood:	MOV (R0)+, (R1)+
0628 06F8 012021               				MOV (R0)+, (R1)+
0629 06FA 012021               				MOV (R0)+, (R1)+
0630 06FC 062701 000072        				ADD #58, R1
0631 0700 077206               				SOB R2, drawGood
0632 0702 000207               				RTS PC
0638 0704 005001               		drawPlayField:	CLR R1
0639 0706 005000               		LOOP2:    	 CLR R0
0640 0708 010046               		LOOP1:	    	  MOV R0, -(SP)
0641 070A 010146               			    	  MOV R1, -(SP)
0642 070C 004737 002562        		  	     	   JSR PC, @#mul01
0643 0710 116203 012222        				   MOVB playfield(R2), R3
0644 0714 004737 002746        		  	     	   JSR PC, @#redrawCell012
0645 0718 012601               			    	  MOV (SP)+, R1
0646 071A 012600               			    	  MOV (SP)+, R0
0647 071C 005200               			  	 INC R0
0648 071E 026700 006534        		  	  	 CMP gameWidth, R0
0649 0722 001362               			  	 BNE LOOP1
0650 0724 005201               				INC R1
0651 0726 026701 006526        				CMP gameHeight, R1
0652 072A 001355               				BNE LOOP2
0654 072C 000137 002372        				JMP @#drawCursor
0660 0730 012700 040000        		clearScreen:	MOV #040000, R0
0661 0734 012702 004000        				MOV #2048, R2
0662 0738 005020               		clearScreen1:	CLR (R0)+
0663 073A 005020               				CLR (R0)+
0664 073C 005020               				CLR (R0)+
0665 073E 005020               				CLR (R0)+
0666 0740 077205               				SOB R2, clearScreen1
0667 0742 000207               				RTS PC
0672 0744 012700 044000        		fillBlocks:	MOV #044000, R0
0673 0748 012704 000016        				MOV #14, R4
0674 074C 012701 012076        		fillBlocks3:	MOV #bmpBlock, R1
0675 0750 012703 000020        				MOV #16, R3
0676 0754 012702 000020        		fillBlocks2:	MOV #16, R2
0677 0758 012120               		fillBlocks1:	MOV (R1)+, (R0)+
0678 075A 012120               				MOV (R1)+, (R0)+
0679 075C 162701 000004        				SUB #4, R1
0680 0760 077205               				SOB R2, fillBlocks1
0681 0762 062701 000004        				ADD #4, R1
0682 0766 077312               				SOB R3, fillBlocks2
0683 0768 077417               				SOB R4, fillBlocks3
0684 076A 000207               				RTS PC
0690 076C 012702 000020        		drawTransImage: MOV     #16, R2
0691 0770 042011               		drawTransImag1:	BIC     (R0)+, (R1)
0692 0772 052021               				BIS     (R0)+, (R1)+
0693 0774 042011               				BIC     (R0)+, (R1)
0694 0776 052021               				BIS     (R0)+, (R1)+
0695 0778 062701 000074        		        	ADD     #60, R1                        
0696 077C 077207               				SOB	R2, drawTransImag1
0697 077E 000207               				RTS	PC
0703 0780 012702 000020        		drawImage:      MOV     #16, R2
0704 0784 012021               		drawImage1:	MOV     (R0)+, (R1)+
0705 0786 012021               				MOV     (R0)+, (R1)+
0706 0788 062701 000074        		        	ADD     #60, R1
0707 078C 077205               				SOB	R2, drawImage1
0708 078E 000207               				RTS	PC
0713 0790                      		Print:		; Установка координат
0714 0790 005001               				CLR R1
0715 0792 112001               				MOVB (R0)+, R1
0716 0794 005002               				CLR R2
0717 0796 112002               				MOVB (R0)+, R2
0718 0798 104024               				EMT 024		                       
0721 079A 010001               				MOV R0, R1
0722 079C 012702 000377        				MOV #0x00FF, R2
0723 07A0 104020               				EMT 020
0726 07A2 112001               		Print1:		MOVB (R0)+, R1
0727 07A4 001376               				BNE Print1
0728 07A6 121027 000377        				CMPB (R0), #255
0729 07AA 001362               				BNE Print
0731 07AC 000207               				RTS PC
0736 07AE 000000 012000 000000 		bmpLogo:   	insert_bitmap2 "resources/logo.bmp",  128, 37
0738 0C4E 000000 000000 000000 		bmpCursor:  	insert_bitmap2t "resources/cursor.bmp",  16, 16
0740 0CCE 177777 037777 177777 		bmpF:    	insert_bitmap2 "resources/f.bmp", 16, 16
0741 0D0E 177777 037777 177777 		bmpQ:    	insert_bitmap2 "resources/q.bmp", 16, 16
0743 0D4E 177777 037777 177777 		bmpUn:   	insert_bitmap2 "resources/un.bmp", 16, 16
0744 0D8E 052525 052525 000001 		bmpB:    	insert_bitmap2 "resources/b.bmp",  16, 16
0745 0DCE 052525 052525 000001 		bmp0:    	insert_bitmap2 "resources/0.bmp",  16, 16
0746 0E0E 052525 052525 000001 		bmp1:    	insert_bitmap2 "resources/1.bmp",  16, 16
0747 0E4E 052525 052525 000001 		bmp2:    	insert_bitmap2 "resources/2.bmp",  16, 16
0748 0E8E 052525 052525 000001 		bmp3:    	insert_bitmap2 "resources/3.bmp",  16, 16
0749 0ECE 052525 052525 000001 		bmp4:    	insert_bitmap2 "resources/4.bmp",  16, 16
0750 0F0E 052525 052525 000001 		bmp5:    	insert_bitmap2 "resources/5.bmp",  16, 16
0751 0F4E 052525 052525 000001 		bmp6:    	insert_bitmap2 "resources/6.bmp",  16, 16
0752 0F8E 052525 052525 000001 		bmp7:    	insert_bitmap2 "resources/7.bmp",  16, 16
0753 0FCE 052525 052525 000001 		bmp8:    	insert_bitmap2 "resources/8.bmp",  16, 16
0755 100E 177777 177777 037777 		bmpGood: 	insert_bitmap2 "resources/good.bmp", 24, 24
0756 109E 177777 177777 037777 		bmpBad:  	insert_bitmap2 "resources/bad.bmp", 24, 24
0757 112E 177777 177777 037777 		bmpWin:  	insert_bitmap2 "resources/win.bmp", 24, 24
0759 11BE 177774 171417 031777 		bmpN0:   	insert_bitmap2 "resources/n0.bmp", 12, 21
0760 11FE 010420 040401 030104 		bmpN1:   	insert_bitmap2 "resources/n1.bmp", 12, 21
0761 123E 177774 170417 031777 		bmpN2:   	insert_bitmap2 "resources/n2.bmp", 12, 21
0762 127E 177774 170417 031777 		bmpN3:   	insert_bitmap2 "resources/n3.bmp", 12, 21
0763 12BE 010420 041401 030104 		bmpN4:   	insert_bitmap2 "resources/n4.bmp", 12, 21
0764 12FE 177774 171417 011777 		bmpN5:   	insert_bitmap2 "resources/n5.bmp", 12, 21
0765 133E 177774 171417 011777 		bmpN6:   	insert_bitmap2 "resources/n6.bmp", 12, 21
0766 137E 177774 170417 031777 		bmpN7:   	insert_bitmap2 "resources/n7.bmp", 12, 21
0767 13BE 177774 171417 031777 		bmpN8:   	insert_bitmap2 "resources/n8.bmp", 12, 21
0768 13FE 177774 171417 031777 		bmpN9:   	insert_bitmap2 "resources/n9.bmp", 12, 21                          
0770 143E 042104 042100 010421 		bmpBlock:   	insert_bitmap2 "resources/block.bmp", 16, 16                       
0772 147E                      		endOfROM:              
0776 147E                      		pfSize equ 256 ; Удобное число для буфера, хотя максимальный размер поля 16x14
0778 147E 000000               		gameWidth:	dw 0
0779 1480 000000               		gameHeight:	dw 0
0780 1482 000000               		gameOverFlag:  	dw 0
0781 1484 000000               		cursorX:    	dw 0
0782 1486 000000               		cursorY:    	dw 0
0783 1488 000000               		playfieldVA:	dw 0
0784 148A 000000               		bombsCnt:   	dw 0
0785 148C 000000               		bombsPutted:	dw 0
0786 148E 000000               		time:	    	dw 0
0787 1490 000000               		lastTimer:      dw 0
0788 1492 000000 000000 000000 		playfield:    	db pfSize dup(0)
0789 1592 000000 000000 000000 		userMarks:    	db pfSize dup(0)
0793 1692 